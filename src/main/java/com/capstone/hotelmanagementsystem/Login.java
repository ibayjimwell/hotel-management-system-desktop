/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.capstone.hotelmanagementsystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import org.mindrot.jbcrypt.BCrypt;

/**
 *
 * @author Admin
 */
public class Login extends javax.swing.JFrame {
 
    // CONSTRUCTOR
   public Login() {
       
      initComponents();
      
      Database.parent = this;
      
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TopPanel4 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        UsernameTextField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        LoginButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        TopPanel4.setBackground(new java.awt.Color(49, 46, 129));
        TopPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        TopPanel4.setPreferredSize(new java.awt.Dimension(1009, 40));
        TopPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        Title.setFont(new java.awt.Font("Arial Black", 0, 16)); // NOI18N
        Title.setForeground(new java.awt.Color(249, 250, 251));
        Title.setText("   LOGIN");
        TopPanel4.add(Title);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Username:");

        UsernameTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        LoginButton.setBackground(new java.awt.Color(49, 46, 129));
        LoginButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LoginButton.setForeground(new java.awt.Color(249, 250, 251));
        LoginButton.setText("Login");
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Password:");

        PasswordField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TopPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(2, 2, 2))
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(308, Short.MAX_VALUE)
                .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(UsernameTextField)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PasswordField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TopPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        String username = UsernameTextField.getText().trim();
        String password = new String(PasswordField.getPassword());

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter both username and password.");
            return;
        }

        try {
            
            Connection conn = Database.getConnection();
            
            // 1. Get staff by username
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM staffs WHERE username = ?");
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                int staffId = rs.getInt("id");
                String storedHashedPassword = rs.getString("password");
                String fullname = rs.getString("first_name") + " " + rs.getString("middle_name") + " " + rs.getString("last_name");
                boolean admin = rs.getBoolean("admin");

                // 2. Check if this staff has a temp_password record
                PreparedStatement tempStmt = conn.prepareStatement("SELECT password FROM temp_password WHERE staff_id = ?");
                tempStmt.setInt(1, staffId);
                ResultSet tempRs = tempStmt.executeQuery();

                if (tempRs.next()) {
                    // Temp password flow
                    String tempPassword = tempRs.getString("password");

                    if (password.equals(tempPassword)) {
                        // Ask user to set a new password
                        JPasswordField newPasswordField = new JPasswordField();
                        JPasswordField confirmField = new JPasswordField();
                        Object[] message = {
                            "New Password:", newPasswordField,
                            "Confirm Password:", confirmField
                        };
                        int option = JOptionPane.showConfirmDialog(this, message, "Reset Your Password", JOptionPane.OK_CANCEL_OPTION);

                        if (option == JOptionPane.OK_OPTION) {
                            String newPassword = new String(newPasswordField.getPassword());
                            String confirmPassword = new String(confirmField.getPassword());

                            if (newPassword.isEmpty() || !newPassword.equals(confirmPassword)) {
                                JOptionPane.showMessageDialog(this, "Passwords do not match or are empty.");
                                return;
                            }

                            // Hash new password
                            String hashedNewPassword = BCrypt.hashpw(newPassword, BCrypt.gensalt());

                            // Update in staffs table
                            PreparedStatement updateStmt = conn.prepareStatement("UPDATE staffs SET password = ? WHERE id = ?");
                            updateStmt.setString(1, hashedNewPassword);
                            updateStmt.setInt(2, staffId);
                            updateStmt.executeUpdate();

                            // Delete temp password
                            PreparedStatement deleteStmt = conn.prepareStatement("DELETE FROM temp_password WHERE staff_id = ?");
                            deleteStmt.setInt(1, staffId);
                            deleteStmt.executeUpdate();

                            JOptionPane.showMessageDialog(this, "Password reset successfully. You may now log in.");

                            // Clear fields
                            UsernameTextField.setText("");
                            PasswordField.setText("");
                            return;
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid username or password.");
                        return;
                    }
                } else {
                    // Normal login flow (no temp password)
                    if (BCrypt.checkpw(password, storedHashedPassword)) {
                        Main main = new Main(staffId, admin, fullname);
                        main.setVisible(true);
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid username or password.");
                    }
                }

            } else {
                JOptionPane.showMessageDialog(this, "Invalid username or password.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }//GEN-LAST:event_LoginButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoginButton;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel Title;
    private javax.swing.JPanel TopPanel4;
    private javax.swing.JTextField UsernameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
